/**
 * DO NOT MODIFY THIS FILE.
 *
 * This file is autogenerated during the build process.
 * Any manual changes will be overwritten in the next build.
 * Please make changes in the source files and rebuild as necessary.
 */

import { rest, getFetcher } from '../core/request'
import config from '../core/config'

// Types
import {
  getCurrentUser,
  getUser,
  updateUser,
  getGroups,
  getGroup,
  createGroup,
  deleteGroup,
  unDeleteGroup,
  addUserToGroup,
  removeUserFromGroup,
  getFriends,
  getFriend,
  createFriend,
  createFriends,
  deleteFriend,
  getCurrencies,
  getExpense,
  getExpenses,
  createExpense,
  updateExpense,
  deleteExpense,
  unDeleteExpense,
  getComments,
  createComment,
  deleteComment,
  getNotifications,
  getCategories,
} from '../types/splitwise'
import type { AuthClient } from '../types/auth'
import type { RestOptions } from '../types/request'
import type { OperationQueryParams, OperationRequestBodyContent } from '../types/utils'

export class Client {
  #auth: AuthClient
  #defaultRequestOptions: RestOptions

  constructor(auth: AuthClient) {
    this.#auth = auth
    this.#defaultRequestOptions = {
      auth: this.#auth,
      fetcher: getFetcher(),
      endpoint: '',
      method: 'GET',
      baseUrl: config.api_url,
    }
  }

  // Collection of all functions relates to users

  public readonly users = {
    /**
     * @name getCurrentUser
     *
     */
    getCurrentUser: () =>
      rest<getCurrentUser>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_current_user`,
        method: 'get',
      }),

    /**
     * @name getUser
     *
     * @param id
     *
     */
    getUser: (id: string) =>
      rest<getUser>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_user/${id}`,
        method: 'get',
      }),

    /**
     * @name updateUser
     *
     * @param id
     *
     */
    updateUser: (id: string, request_body: OperationRequestBodyContent<updateUser>) =>
      rest<updateUser>({
        ...this.#defaultRequestOptions,
        endpoint: `/update_user/${id}`,
        requestBody: request_body,
        method: 'post',
      }),
  }

  // Collection of all functions relates to groups

  public readonly groups = {
    /**
     * @name getGroups
     *
     */
    getGroups: () =>
      rest<getGroups>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_groups`,
        method: 'get',
      }),

    /**
     * @name getGroup
     *
     * @param id
     *
     */
    getGroup: (id: string) =>
      rest<getGroup>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_group/${id}`,
        method: 'get',
      }),

    /**
     * @name createGroup
     *
     */
    createGroup: (request_body: OperationRequestBodyContent<createGroup>) =>
      rest<createGroup>({
        ...this.#defaultRequestOptions,
        endpoint: `/create_group`,
        requestBody: request_body,
        method: 'post',
      }),

    /**
     * @name deleteGroup
     *
     * @param id
     *
     */
    deleteGroup: (id: string) =>
      rest<deleteGroup>({
        ...this.#defaultRequestOptions,
        endpoint: `/delete_group/${id}`,
        method: 'post',
      }),

    /**
     * @name unDeleteGroup
     *
     * @param id
     *
     */
    unDeleteGroup: (id: string) =>
      rest<unDeleteGroup>({
        ...this.#defaultRequestOptions,
        endpoint: `/undelete_group/${id}`,
        method: 'post',
      }),

    /**
     * @name addUserToGroup
     *
     */
    addUserToGroup: (request_body: OperationRequestBodyContent<addUserToGroup>) =>
      rest<addUserToGroup>({
        ...this.#defaultRequestOptions,
        endpoint: `/add_user_to_group`,
        requestBody: request_body,
        method: 'post',
      }),

    /**
     * @name removeUserFromGroup
     *
     */
    removeUserFromGroup: (request_body: OperationRequestBodyContent<removeUserFromGroup>) =>
      rest<removeUserFromGroup>({
        ...this.#defaultRequestOptions,
        endpoint: `/remove_user_from_group`,
        requestBody: request_body,
        method: 'post',
      }),
  }

  // Collection of all functions relates to friends

  public readonly friends = {
    /**
     * @name getFriends
     *
     */
    getFriends: () =>
      rest<getFriends>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_friends`,
        method: 'get',
      }),

    /**
     * @name getFriend
     *
     * @param id User ID of the friend
     *
     */
    getFriend: (id: string) =>
      rest<getFriend>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_friend/${id}`,
        method: 'get',
      }),

    /**
     * @name createFriend
     *
     */
    createFriend: (request_body: OperationRequestBodyContent<createFriend>) =>
      rest<createFriend>({
        ...this.#defaultRequestOptions,
        endpoint: `/create_friend`,
        requestBody: request_body,
        method: 'post',
      }),

    /**
     * @name createFriends
     *
     */
    createFriends: (request_body: OperationRequestBodyContent<createFriends>) =>
      rest<createFriends>({
        ...this.#defaultRequestOptions,
        endpoint: `/create_friends`,
        requestBody: request_body,
        method: 'post',
      }),

    /**
     * @name deleteFriend
     *
     * @param id User ID of the friend
     *
     */
    deleteFriend: (id: string) =>
      rest<deleteFriend>({
        ...this.#defaultRequestOptions,
        endpoint: `/delete_friend/${id}`,
        method: 'post',
      }),
  }

  // Collection of all functions relates to expenses

  public readonly expenses = {
    /**
     * @name getExpense
     *
     * @param id
     *
     */
    getExpense: (id: string) =>
      rest<getExpense>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_expense/${id}`,
        method: 'get',
      }),

    /**
     * @name getExpenses
     *
     */
    getExpenses: (params: OperationQueryParams<getExpenses>) =>
      rest<getExpenses>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_expenses`,
        params: params,
        method: 'get',
      }),

    /**
     * @name createExpense
     *
     */
    createExpense: (request_body: OperationRequestBodyContent<createExpense>) =>
      rest<createExpense>({
        ...this.#defaultRequestOptions,
        endpoint: `/create_expense`,
        requestBody: request_body,
        method: 'post',
      }),

    /**
     * @name updateExpense
     *
     * @param id ID of the expense to update
     *
     */
    updateExpense: (id: string, request_body: OperationRequestBodyContent<updateExpense>) =>
      rest<updateExpense>({
        ...this.#defaultRequestOptions,
        endpoint: `/update_expense/${id}`,
        requestBody: request_body,
        method: 'post',
      }),

    /**
     * @name deleteExpense
     *
     * @param id ID of the expense to delete
     *
     */
    deleteExpense: (id: string) =>
      rest<deleteExpense>({
        ...this.#defaultRequestOptions,
        endpoint: `/delete_expense/${id}`,
        method: 'post',
      }),

    /**
     * @name unDeleteExpense
     *
     * @param id ID of the expense to restore
     *
     */
    unDeleteExpense: (id: string) =>
      rest<unDeleteExpense>({
        ...this.#defaultRequestOptions,
        endpoint: `/undelete_expense/${id}`,
        method: 'post',
      }),
  }

  // Collection of all functions relates to comments

  public readonly comments = {
    /**
     * @name getComments
     *
     */
    getComments: (params: OperationQueryParams<getComments>) =>
      rest<getComments>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_comments`,
        params: params,
        method: 'get',
      }),

    /**
     * @name createComment
     *
     */
    createComment: (request_body: OperationRequestBodyContent<createComment>) =>
      rest<createComment>({
        ...this.#defaultRequestOptions,
        endpoint: `/create_comment`,
        requestBody: request_body,
        method: 'post',
      }),

    /**
     * @name deleteComment
     *
     * @param id
     *
     */
    deleteComment: (id: string) =>
      rest<deleteComment>({
        ...this.#defaultRequestOptions,
        endpoint: `/delete_comment/${id}`,
        method: 'post',
      }),
  }

  // Collection of all functions relates to notifications

  public readonly notifications = {
    /**
     * @name getNotifications
     *
     */
    getNotifications: (params: OperationQueryParams<getNotifications>) =>
      rest<getNotifications>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_notifications`,
        params: params,
        method: 'get',
      }),
  }

  // Collection of all functions relates to other

  public readonly other = {
    /**
     * @name getCurrencies
     *
     */
    getCurrencies: () =>
      rest<getCurrencies>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_currencies`,
        method: 'get',
      }),

    /**
     * @name getCategories
     *
     */
    getCategories: () =>
      rest<getCategories>({
        ...this.#defaultRequestOptions,
        endpoint: `/get_categories`,
        method: 'get',
      }),
  }
}
